/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import { ButtonSize, ButtonVariant } from './components/sd-button/sd-button';
import { SelectOption } from './components/sd-select/sd-select';
import { TagColor, TagSize } from './components/sd-tag/sd-tag';
export { ButtonSize, ButtonVariant } from './components/sd-button/sd-button';
export { SelectOption } from './components/sd-select/sd-select';
export { TagColor, TagSize } from './components/sd-tag/sd-tag';
export namespace Components {
 interface SdButton {
  /**
   * @default '#025497'
   */
  color?: string;
  /**
   * @default false
   */
  disabled?: boolean;
  /**
   * @default ''
   */
  label?: string;
  /**
   * @default 'sm'
   */
  size?: ButtonSize;
  /**
   * @default 'button'
   */
  type?: 'button' | 'submit' | 'reset';
  /**
   * @default 'primary'
   */
  variant?: ButtonVariant;
 }
 interface SdInput {
  /**
   * @default false
   */
  barcode?: boolean;
  /**
   * @default false
   */
  clearable: boolean;
  /**
   * @default false
   */
  disabled: boolean;
  label?: string;
  /**
   * @default '입력해 주세요.'
   */
  placeholder: string;
  rules?: Array<(value: string | number | null) => boolean | string>;
  /**
   * @default null
   */
  value?: string | number | null;
  width?: number;
 }
 interface SdInput {}
 interface SdSelect {
  /**
   * @default false
   */
  clearable: boolean;
  /**
   * @default {}
   */
  containerStyle: { [key: string]: string };
  /**
   * @default false
   */
  disabled: boolean;
  /**
   * @default {}
   */
  dropdownStyle: { [key: string]: string };
  /**
   * @default ''
   */
  label: string;
  /**
   * @default {}
   */
  labelStyle: { [key: string]: string };
  /**
   * @default {}
   */
  optionStyle: { [key: string]: string };
  /**
   * @default []
   */
  options: SelectOption[];
  /**
   * @default '선택'
   */
  placeholder: string;
  /**
   * @default false
   */
  searchable: boolean;
  /**
   * @default {}
   */
  triggerStyle: { [key: string]: string };
  /**
   * @default null
   */
  value: string | number | null;
  /**
   * @default '200px'
   */
  width: string;
 }
 interface SdTag {
  bgColor?: string;
  /**
   * @default 'grey'
   */
  color: TagColor;
  /**
   * @default ''
   */
  label: string;
  /**
   * @default false
   */
  rounded: boolean;
  /**
   * @default 'md'
   */
  size: TagSize;
  textColor?: string;
 }
}
export interface SdButtonCustomEvent<T> extends CustomEvent<T> {
 detail: T;
 target: HTMLSdButtonElement;
}
export interface SdInputCustomEvent<T> extends CustomEvent<T> {
 detail: T;
 target: HTMLSdInputElement;
}
export interface SdSelectCustomEvent<T> extends CustomEvent<T> {
 detail: T;
 target: HTMLSdSelectElement;
}
declare global {
 interface HTMLSdButtonElementEventMap {
  sdClick: MouseEvent;
 }
 interface HTMLSdButtonElement extends Components.SdButton, HTMLStencilElement {
  addEventListener<K extends keyof HTMLSdButtonElementEventMap>(
   type: K,
   listener: (
    this: HTMLSdButtonElement,
    ev: SdButtonCustomEvent<HTMLSdButtonElementEventMap[K]>,
   ) => any,
   options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener<K extends keyof DocumentEventMap>(
   type: K,
   listener: (this: Document, ev: DocumentEventMap[K]) => any,
   options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
   type: K,
   listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
   options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
   type: string,
   listener: EventListenerOrEventListenerObject,
   options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLSdButtonElementEventMap>(
   type: K,
   listener: (
    this: HTMLSdButtonElement,
    ev: SdButtonCustomEvent<HTMLSdButtonElementEventMap[K]>,
   ) => any,
   options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener<K extends keyof DocumentEventMap>(
   type: K,
   listener: (this: Document, ev: DocumentEventMap[K]) => any,
   options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
   type: K,
   listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
   options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
   type: string,
   listener: EventListenerOrEventListenerObject,
   options?: boolean | EventListenerOptions,
  ): void;
 }
 var HTMLSdButtonElement: {
  prototype: HTMLSdButtonElement;
  new (): HTMLSdButtonElement;
 };
 interface HTMLSdInputElementEventMap {
  onInput: string | number | null;
  onChange: string | number | null;
 }
 interface HTMLSdInputElement extends Components.SdInput, HTMLStencilElement {
  addEventListener<K extends keyof HTMLSdInputElementEventMap>(
   type: K,
   listener: (
    this: HTMLSdInputElement,
    ev: SdInputCustomEvent<HTMLSdInputElementEventMap[K]>,
   ) => any,
   options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener<K extends keyof DocumentEventMap>(
   type: K,
   listener: (this: Document, ev: DocumentEventMap[K]) => any,
   options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
   type: K,
   listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
   options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
   type: string,
   listener: EventListenerOrEventListenerObject,
   options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLSdInputElementEventMap>(
   type: K,
   listener: (
    this: HTMLSdInputElement,
    ev: SdInputCustomEvent<HTMLSdInputElementEventMap[K]>,
   ) => any,
   options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener<K extends keyof DocumentEventMap>(
   type: K,
   listener: (this: Document, ev: DocumentEventMap[K]) => any,
   options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
   type: K,
   listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
   options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
   type: string,
   listener: EventListenerOrEventListenerObject,
   options?: boolean | EventListenerOptions,
  ): void;
 }
 var HTMLSdInputElement: {
  prototype: HTMLSdInputElement;
  new (): HTMLSdInputElement;
 };
 interface HTMLSdInputElement extends Components.SdInput, HTMLStencilElement {}
 var HTMLSdInputElement: {
  prototype: HTMLSdInputElement;
  new (): HTMLSdInputElement;
 };
 interface HTMLSdSelectElementEventMap {
  valueChanged: {
   value: string | number | null;
   option: SelectOption | null;
  };
  dropDownShow: { isOpen: boolean };
 }
 interface HTMLSdSelectElement extends Components.SdSelect, HTMLStencilElement {
  addEventListener<K extends keyof HTMLSdSelectElementEventMap>(
   type: K,
   listener: (
    this: HTMLSdSelectElement,
    ev: SdSelectCustomEvent<HTMLSdSelectElementEventMap[K]>,
   ) => any,
   options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener<K extends keyof DocumentEventMap>(
   type: K,
   listener: (this: Document, ev: DocumentEventMap[K]) => any,
   options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener<K extends keyof HTMLElementEventMap>(
   type: K,
   listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
   options?: boolean | AddEventListenerOptions,
  ): void;
  addEventListener(
   type: string,
   listener: EventListenerOrEventListenerObject,
   options?: boolean | AddEventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLSdSelectElementEventMap>(
   type: K,
   listener: (
    this: HTMLSdSelectElement,
    ev: SdSelectCustomEvent<HTMLSdSelectElementEventMap[K]>,
   ) => any,
   options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener<K extends keyof DocumentEventMap>(
   type: K,
   listener: (this: Document, ev: DocumentEventMap[K]) => any,
   options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener<K extends keyof HTMLElementEventMap>(
   type: K,
   listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,
   options?: boolean | EventListenerOptions,
  ): void;
  removeEventListener(
   type: string,
   listener: EventListenerOrEventListenerObject,
   options?: boolean | EventListenerOptions,
  ): void;
 }
 var HTMLSdSelectElement: {
  prototype: HTMLSdSelectElement;
  new (): HTMLSdSelectElement;
 };
 interface HTMLSdTagElement extends Components.SdTag, HTMLStencilElement {}
 var HTMLSdTagElement: {
  prototype: HTMLSdTagElement;
  new (): HTMLSdTagElement;
 };
 interface HTMLElementTagNameMap {
  'sd-button': HTMLSdButtonElement;
  'sd-input': HTMLSdInputElement;
  'sd-input': HTMLSdInputElement;
  'sd-select': HTMLSdSelectElement;
  'sd-tag': HTMLSdTagElement;
 }
}
declare namespace LocalJSX {
 interface SdButton {
  /**
   * @default '#025497'
   */
  color?: string;
  /**
   * @default false
   */
  disabled?: boolean;
  /**
   * @default ''
   */
  label?: string;
  onSdClick?: (event: SdButtonCustomEvent<MouseEvent>) => void;
  /**
   * @default 'sm'
   */
  size?: ButtonSize;
  /**
   * @default 'button'
   */
  type?: 'button' | 'submit' | 'reset';
  /**
   * @default 'primary'
   */
  variant?: ButtonVariant;
 }
 interface SdInput {
  /**
   * @default false
   */
  barcode?: boolean;
  /**
   * @default false
   */
  clearable?: boolean;
  /**
   * @default false
   */
  disabled?: boolean;
  label?: string;
  onOnChange?: (event: SdInputCustomEvent<string | number | null>) => void;
  onOnInput?: (event: SdInputCustomEvent<string | number | null>) => void;
  /**
   * @default '입력해 주세요.'
   */
  placeholder?: string;
  rules?: Array<(value: string | number | null) => boolean | string>;
  /**
   * @default null
   */
  value?: string | number | null;
  width?: number;
 }
 interface SdInput {}
 interface SdSelect {
  /**
   * @default false
   */
  clearable?: boolean;
  /**
   * @default {}
   */
  containerStyle?: { [key: string]: string };
  /**
   * @default false
   */
  disabled?: boolean;
  /**
   * @default {}
   */
  dropdownStyle?: { [key: string]: string };
  /**
   * @default ''
   */
  label?: string;
  /**
   * @default {}
   */
  labelStyle?: { [key: string]: string };
  onDropDownShow?: (event: SdSelectCustomEvent<{ isOpen: boolean }>) => void;
  onValueChanged?: (
   event: SdSelectCustomEvent<{
    value: string | number | null;
    option: SelectOption | null;
   }>,
  ) => void;
  /**
   * @default {}
   */
  optionStyle?: { [key: string]: string };
  /**
   * @default []
   */
  options?: SelectOption[];
  /**
   * @default '선택'
   */
  placeholder?: string;
  /**
   * @default false
   */
  searchable?: boolean;
  /**
   * @default {}
   */
  triggerStyle?: { [key: string]: string };
  /**
   * @default null
   */
  value?: string | number | null;
  /**
   * @default '200px'
   */
  width?: string;
 }
 interface SdTag {
  bgColor?: string;
  /**
   * @default 'grey'
   */
  color?: TagColor;
  /**
   * @default ''
   */
  label?: string;
  /**
   * @default false
   */
  rounded?: boolean;
  /**
   * @default 'md'
   */
  size?: TagSize;
  textColor?: string;
 }
 interface IntrinsicElements {
  'sd-button': SdButton;
  'sd-input': SdInput;
  'sd-input': SdInput;
  'sd-select': SdSelect;
  'sd-tag': SdTag;
 }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
 export namespace JSX {
  interface IntrinsicElements {
   'sd-button': LocalJSX.SdButton & JSXBase.HTMLAttributes<HTMLSdButtonElement>;
   'sd-input': LocalJSX.SdInput & JSXBase.HTMLAttributes<HTMLSdInputElement>;
   'sd-input': LocalJSX.SdInput & JSXBase.HTMLAttributes<HTMLSdInputElement>;
   'sd-select': LocalJSX.SdSelect & JSXBase.HTMLAttributes<HTMLSdSelectElement>;
   'sd-tag': LocalJSX.SdTag & JSXBase.HTMLAttributes<HTMLSdTagElement>;
  }
 }
}
