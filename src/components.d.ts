/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { SelectOption } from "./components/sd-select/sd-select";
export { SelectOption } from "./components/sd-select/sd-select";
export namespace Components {
    interface MyComponent {
        /**
          * label of the button
         */
        "label": string;
    }
    interface SdSelect {
        /**
          * @default false
         */
        "clearable": boolean;
        "containerStyle": { [key: string]: string };
        /**
          * @default false
         */
        "disabled": boolean;
        "dropdownStyle": { [key: string]: string };
        "label": string;
        "labelStyle": { [key: string]: string };
        "optionStyle": { [key: string]: string };
        /**
          * @default []
         */
        "options": SelectOption[];
        /**
          * @default '선택'
         */
        "placeholder": string;
        "triggerStyle": { [key: string]: string };
        "value": string | number;
        /**
          * @default '200px'
         */
        "width": string;
    }
}
export interface MyComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyComponentElement;
}
export interface SdSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSdSelectElement;
}
declare global {
    interface HTMLMyComponentElementEventMap {
        "clicked": void;
    }
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyComponentElementEventMap>(type: K, listener: (this: HTMLMyComponentElement, ev: MyComponentCustomEvent<HTMLMyComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyComponentElementEventMap>(type: K, listener: (this: HTMLMyComponentElement, ev: MyComponentCustomEvent<HTMLMyComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSdSelectElementEventMap {
        "valueChanged": { value: string | number; option: SelectOption };
        "dropDownShow": { isOpen: boolean };
    }
    interface HTMLSdSelectElement extends Components.SdSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSdSelectElementEventMap>(type: K, listener: (this: HTMLSdSelectElement, ev: SdSelectCustomEvent<HTMLSdSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSdSelectElementEventMap>(type: K, listener: (this: HTMLSdSelectElement, ev: SdSelectCustomEvent<HTMLSdSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSdSelectElement: {
        prototype: HTMLSdSelectElement;
        new (): HTMLSdSelectElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "sd-select": HTMLSdSelectElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * label of the button
         */
        "label"?: string;
        /**
          * Emitted when the button is clicked
         */
        "onClicked"?: (event: MyComponentCustomEvent<void>) => void;
    }
    interface SdSelect {
        /**
          * @default false
         */
        "clearable"?: boolean;
        "containerStyle"?: { [key: string]: string };
        /**
          * @default false
         */
        "disabled"?: boolean;
        "dropdownStyle"?: { [key: string]: string };
        "label"?: string;
        "labelStyle"?: { [key: string]: string };
        "onDropDownShow"?: (event: SdSelectCustomEvent<{ isOpen: boolean }>) => void;
        "onValueChanged"?: (event: SdSelectCustomEvent<{ value: string | number; option: SelectOption }>) => void;
        "optionStyle"?: { [key: string]: string };
        /**
          * @default []
         */
        "options"?: SelectOption[];
        /**
          * @default '선택'
         */
        "placeholder"?: string;
        "triggerStyle"?: { [key: string]: string };
        "value"?: string | number;
        /**
          * @default '200px'
         */
        "width"?: string;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "sd-select": SdSelect;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "sd-select": LocalJSX.SdSelect & JSXBase.HTMLAttributes<HTMLSdSelectElement>;
        }
    }
}
